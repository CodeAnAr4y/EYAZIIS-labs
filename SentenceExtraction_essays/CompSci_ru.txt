Computer Science - это наука, объединяющая в себе различные области знаний, которые будут полезны специалисту, работающему с компьютерами и вычислениями.  Самые необходимые из них, те, которые встречаются на практике постоянно я сейчас максимально кратко и перечислю.  Суть в том, что не нужно заучивать реализацию чужих алгоритмов, а стараться развивать своё алгоритмическое мышление, чтобы ты сам мог составлять алгоритмы.  Развить эти навыки можно решая задачи и разбирая готовые алгоритмы, а не заучивая их.  Кстати у нас на канале есть ролик «Как решать задачи по программированию».   Действительно важно хотя бы примерно прикидывать временную сложность алгоритма.  Нужно понимать какой участок кода тормозит всё твою программу, почему O(n^2) хуже, чем O(n*log(n)), как следует переделать код чтобы добиться этого O(n*log(n)) и почему вот так лучше вообще не делать. 

Кодировки - UTF-8, Windows-1251, ASCII и т.  Поэтому ориентируясь в этом хотя бы на минимальном базовом уровне, вы знатно облегчите себе жизнь.  Это поможет тебе выбрать наиболее подходящий инструмент и подход для максимально эффективного решения твоей задачи.  Потому что язык и технология это в первую очередь просто инструменты, которые надо уметь грамотно выбирать под советующую работу.  Стоит ознакомиться с понятием рекурсии, мемоизации, динамического, линейного программирования и тому подобного.  Это поможет сделать твой код гораздо эффективнее и качественнее.  Хотя бы примерно понимать, что такое память в компьютере, зачем нужна, какая быстрее и т.  Почему копировать объект 1000 раз не самая лучшая идея, зачем нужно кешировать информацию и т.  Также неплохо бы разобраться в особенности вычислений процессором, видеокартой.  Списки, деревья, очереди и т.  Вот необходимо на проекте решить какую-то задачу, а ты такой «О, чем-то это задача похоже на историю с графами».  Есть зацепка, начинаешь гуглить графы, алгоритмы решения задач на графах, библиотеки для этого.   Поверь, твоя жизнь станет сильно легче, если конфиг настроек для бота ты будешь хранить в словаре, а не в массиве.  Опять-таки, тебе не нужно уметь с нуля собственными руками реализовывать этот словарь, хеш-таблицу (хотя можно, ничего неподъёмного там нет).  SQL, запросы, таблицы, связи один ко многим, 1 к 1, многие ко многим, миграции.  Важно уметь писать код качественно, чтобы его было легко сопровождать, расширять.  Серьёзное программирование это сложный итеративный процесс, зачастую комодный.  Поэтому качественно спроектированная программа сделает вашу жизнь и жизнь других разработчиков лучше.  Тут приходится понимание построение архитектуры ПО и грамотное использование паттернов (шаблонов) проектирование (GoF, GRASP, Enterprise).  Кроме того, не мешало бы овладеть общепринятыми практиками (SOLID, KISS, DRY и т.  Что такое протоколы, сокеты, DNS, IP-адреса, зачем оно всё нужно и как между собой взаимодействует.  Вообще математика для программиста эта тема довольно обширная и холиварная, заслуживающая отдельного обстоятельного разговора